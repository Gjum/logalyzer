#!/bin/bash
# Scans all logfiles of one day and outputs various play time statistics.
# Copyright (c) 2014 Gjum. All rights reserved.

source utils # include utility functions

# arguments
today="$1" # year-month-day of the logfiles to read
filelist="`getlogfilesoftoday "$today" '.log.gz'`"

slotsec=3600 # 3600 seconds/hour, 86400 seconds/day
if [ -n "$2" ]; then slotsec="$2"; fi

# {{{ init
declare -A jointimes # last time the player joined
declare -A slots # time and names of players online at that timeframe
declare -A onlinetimes # total time each player has been online during this log
declare -A onlinespans # times at which each player joined/left

online= # holds all online players
# }}}

leave() { # {{{ player left, process the timespan he was online at
	jointime="${jointimes["$name"]}"
	if [ -z "$jointime" ]; then # {{{ player left without joining
		if [[ -z "$freshstart" || "$freshstart" == *$name* ]]; then # the player did not join and the server was just started
			echo -e "${cr}ERROR${cn} `date -d @$seconds '+%a %d.%m.%Y %H:%M'` \"$name\" left without joining"
		else # assume the server was started yesterday
			jointime="`date -d "$today 00:00:00" +%s`" # the time this logfile started, in seconds since epoch
			freshstart="$freshstart $name"
		fi
	fi # }}}
	if [ -n "$jointime" ]; then # leave if no error
		# add entry to onlinespans
		if [ -z "${onlinespans["$name"]}" ]; then # onlinespan of this player is empty, fill with name
			onlinespans["$name"]="$name"
		fi
		onlinespans["$name"]+=" $jointime-$seconds"
		# add the player to all slots he was online at
		for slot in `seq $(($jointime / $slotsec)) $(($seconds / $slotsec))`; do
			slottime=$(( $slot * $slotsec ))
			if [ -z "${slots["$slot"]}" ]; then # {{{ slot is empty, fill it with its date/time
				# human readable (tty) format: 1407874849 Sun 12.03.2014 12:34 gjum (42min) notch (23min)
				# machine readable (non-tty) format: 1407874849 Sun 12.03.2014 12:34 gjum (42min) notch (23min)
				if $istty; then
					humanreadabledate="`date -d @$slottime '+%a %d.%m.%Y %H:%M'`" # date format: Sun 12.03.2014 12:34
					slots["$slot"]="$slottime ${cg}$humanreadabledate${cn}"
				else
					slots["$slot"]="$slottime"
				fi
			fi # }}}
			# {{{ add player name and playtime to slot
			slotplaystart="$slottime"
			slotplayend="$(( $slottime + $slotsec ))"
			[ "$slotplaystart" -lt "$jointime" ] && slotplaystart="$jointime"
			[ "$slotplayend" -gt "$seconds" ] && slotplayend="$seconds"
			slotplaytime=$(( $slotplayend - $slotplaystart )) # the time the player played during this slot
			if [[ "${slots["$slot"]}" == *$name* ]]; then
				# player was already online during this slot, add times together
				if $istty; then
					addtime="`echo "${slots["$slot"]}" | grep -o " $name ([0-9]*" | cut -d'(' -f2`"
					slotwithoutold="`echo "${slots["$slot"]}" | sed "s/ $name ([0-9]*min)//"`"
					slots["$slot"]="$slotwithoutold $name ($(( $slotplaytime / 60 + $addtime ))min)"
				else
					addtime="`echo "${slots["$slot"]}" | grep -o " $name [0-9]*" | cut -d' ' -f3`"
					slotwithoutold="`echo "${slots["$slot"]}" | sed "s/ $name [0-9]*//"`"
					slots["$slot"]="$slotwithoutold $name $(( $slotplaytime + $addtime ))"
				fi
			else # add player's entry at the end of the line
				if $istty; then
					slots["$slot"]="${slots["$slot"]} $name ($((($slotplaytime + 59) / 60))min)"
				else
					slots["$slot"]="${slots["$slot"]} $name $slotplaytime"
				fi
			fi # }}}
		done
		# increase player's playtime
		difftime="$(( $seconds - $jointime ))"
		if [ -z "${onlinetimes["$name"]}" ]; then
			onlinetimes["$name"]="$difftime"
		else onlinetimes["$name"]=$(( $difftime + ${onlinetimes["$name"]} ))
		fi
	fi
	online="`echo $online | sed "s/$name *//"`"
	jointimes["$name"]=$seconds # if not joining again, next leave will simulate a join at this leave (prevent errors when logging in from another location)
} # }}}

# {{{ scan all logfiles of today
for logfile in $filelist; do
	readcmd='gzip -dc'
	if [[ "$logfile" != *.gz ]]; then readcmd='cat'; fi # use cat (slower than <) since we do not use this mode very often
	freshstart=false # empty if the server started at the beginning of the log, also contains player names that previously joined/left after log start
	if `$readcmd $logfile | head -n 1 | grep -q 'Starting'`; then
		freshstart=
	fi
	# read the lines with relevant info (joined/left/restart)
	while read line; do
		time="`echo $line | cut -b2-9`" # time the output was created, e.g. 01:23:45
		seconds=`date -d "$today $time" +%s` # convert to seconds since epoch
		action="`echo $line | grep -o '\(joined\|left\)'`"
		name="`echo $line | cut -b34- | grep -o '^[^ ]*'`" # player name
		case $action in # {{{
			joined)
				if [[ "$online" != *$name* ]]; then # player is not already online
					jointimes["$name"]="$seconds"
					online="$name $online"
				fi
				;;
			left) leave
				;;
			*) echo -e "${cr}ERROR${cn} Invalid action \"$action\". \"$line\""
				;;
		esac # }}}
	done < <($readcmd $logfile | grep -v '<' | grep ' the game$' | grep 'Server thread/INFO' | sed "s/`printf '\247'`.//g")
	# {{{ all players leave
	# TODO 24:00 when server was not stopped
	time="`$readcmd $logfile | cut -b2-9 | grep -Eo '[0-9:]*' | tail -n 1`"
	seconds=`date -d "$today $time" +%s` # convert to seconds since epoch
	for name in `echo "$online" | grep -o '[^ ].*[^ ]'`; do # overwrite the empty name field
		leave
	done # }}}
done # }}}

# {{{ print results
if $istty; then
	# print time slot occupations
	echo -e "`printf '%s\n' "${slots[@]}" | sort | grep -o '[^0-9 ].*$'`" # strip seconds from output

	# omit times at which each player joined/left

	# print online times
	out=
	echo -e "\n${cb}Online times:${cn}"
	for name in "${!onlinetimes[@]}"; do
		seconds="${onlinetimes["$name"]}"
		converted="`convertsecs $seconds`"
		out="$out`printf '\n%5d seconds or %s' "$seconds" "$converted"` ${cy}$name${cn}"
	done
	echo -e "`echo "$out" | sort -nr`" # sort descending, natural numbers ordering
else
	# print time slot occupations
	echo -e "`printf '%s\n' "${slots[@]}" | sort`"

	# print times at which each player joined/left
	echo '=== timespans ==='
	for line in "${onlinespans[@]}"; do
		echo "$line"
	done

	# print online times
	echo '=== onlinetimes ==='
	for name in "${!onlinetimes[@]}"; do
		seconds="${onlinetimes["$name"]}"
		echo "$name $seconds"
	done
fi # }}}

exit 0

