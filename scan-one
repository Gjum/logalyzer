#!/bin/bash
# Scans one logfile and outputs the slot occupancies and play times.
# Copyright (c) 2014 Gjum. All rights reserved.

# arguments
logfile="$1"
slotsec=3600 # 3600 seconds/hour, 86400 seconds/day
if [ -n "$2" ]; then slotsec="$2"; fi

# Is output a tty?
istty=false
if test -t 1; then
	istty=true
fi

# coloring
if $istty; then
	cr="\e[1;49;31m" # red
	cg="\e[1;49;32m" # green
	cy="\e[1;49;33m" # yellow
	cb="\e[1;49;34m" # blue
	cn="\e[0;0;0m"   # normal/reset
fi

# {{{ init
declare -A jointimes # holds the last time the player joined
declare -A slots # holds the time and names of players online at that timeframe
declare -A onlinetimes # holds the time each player has been online during this log

online= # holds all online players

date="`echo $logfile | grep -Eo '[0-9-]{10}'`" # e.g. 2014-08-20

freshstart=false # empty if the server started at the beginning of the log, also contains player names that previously joined/left after log start
if `gzip -dc $logfile | head -n 1 | grep -q 'Starting'`; then
	freshstart=
fi
# }}}

leave() { # {{{ runs when a player left
	jointime="${jointimes["$name"]}"
	if [ -z "$jointime" ]; then # player left without joining
		if `[ -z "$freshstart" ] || echo "$freshstart" | grep -q "$name"`; then # the player did not join and the server was just started
			echo -e "${cr}ERROR${cn} `date -d @$seconds '+%a %d.%m.%Y %H:%M'` \"$name\" left without joining"
		else # assume the server was started yesterday
			jointime="`date -d "$date 00:00:00" +%s`" # the time this logfile started, in seconds since epoch
			freshstart="$freshstart $name"
		fi
	fi
	if [ -n "$jointime" ]; then # leave if no error
		# add the player to all slots he was online at
		difftime="$(( $seconds - $jointime ))"
		for slot in `seq $(($jointime / $slotsec)) $(($seconds / $slotsec))`; do
			if [ -z "${slots["$slot"]}" ]; then # put the time in seconds at the beginning of the slot
				# slot contents format: 1407874849 Sun 12.03.2014 12:34 gjum notch
				slottime=$(( $slot * $slotsec ))
				if $istty; then
					humanreadabledate="`date -d @$slottime '+%a %d.%m.%Y %H:%M'`" # date format: Sun 12.03.2014 12:34
					slots["$slot"]="$slottime ${cg}$humanreadabledate${cn}"
				else
					slots["$slot"]="$slottime"
				fi
			fi
			if `echo "${slots["$slot"]}" | grep -qv "$name"`; then
				slots["$slot"]="${slots["$slot"]} $name ($(($difftime / 60))min)"
			fi
		done
		# increase player's playtime
		if [ -z "${onlinetimes["$name"]}" ]; then
			onlinetimes["$name"]="$difftime"
		else onlinetimes["$name"]=$(( $difftime + ${onlinetimes["$name"]} ))
		fi
	fi
	online="`echo $online | sed "s/$name *//"`"
	jointimes["$name"]=$seconds # if not joining again, next leave will simulate a join at this leave (prevent errors when logging in from another location)
}
# }}}

convertsecs() { # {{{ convert seconds into hours:minutes:seconds
	h=`expr $1 / 3600`
	m=`expr $1 % 3600 / 60`
	s=`expr $1 % 60`
	printf "%02d:%02d:%02d\n" $h $m $s
}
# }}}

# only read lines with relevant info (joined/left/restart)
while read line; do
	time="`echo $line | cut -b2-9`" # time the output was created, e.g. 01:23:45
	seconds=`date -d "$date $time" +%s` # convert to seconds since epoch
	action="`echo $line | grep -o '\(joined\|left\)'`" # only joined or left are bound to players
	name="`echo $line | cut -b34- | grep -o '^[^ ]*'`" # player name
	# {{{
	case $action in
		joined)
			if echo "$online" | grep -qv "$name"; then # player is not already online
				jointimes["$name"]="$seconds"
				online="$name $online"
			fi
			;;
		left) leave
			;;
		*) echo -e "${cr}ERROR${cn} Invalid action \"$action\". \"$line\""
			;;
	esac
	# }}}
done < <(gzip -dc $logfile | grep ' the game$' | grep 'Server thread/INFO' | sed "s/`printf '\247'`.//g" | grep -v '[<>]')

# {{{ all players leave, because either the server was stopped or the day ended
time="`gzip -dc $logfile | cut -b2-9 | grep -Eo '[0-9:]*' | tail -n 1`"
seconds=`date -d "$date $time" +%s` # convert to seconds since epoch
for name in `echo "$online" | grep -o '[^ ].*[^ ]'`; do # overwrite the empty name field
	leave
done
# }}}

# {{{ print results
if $istty; then
	# print time slot occupations
	echo -e "`printf '%s\n' "${slots[@]}" | sort | grep -o '[^0-9 ].*$'`" # strip seconds from output

	# print online times
	out=
	echo -e "\n${cb}Online times:${cn}"
	for name in "${!onlinetimes[@]}"; do
		seconds="${onlinetimes["$name"]}"
		converted="`convertsecs $seconds`"
		out="$out`printf '\n%5d seconds or %s' "$seconds" "$converted"` ${cy}$name${cn}"
	done
	echo -e "`echo "$out" | sort -nr`" # sort descending, natural numbers ordering
else
	# print time slot occupations
	echo -e "`printf '%s\n' "${slots[@]}" | sort`"

	# print online
	echo '=== onlinetimes ==='
	for name in "${!onlinetimes[@]}"; do
		echo "$name $seconds"
	done
fi

# }}}

exit 0

