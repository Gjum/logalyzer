#!/usr/bin/env python3

from datetime import datetime, timedelta
from time import strftime, strptime
import logalyzer
import sys

if len(sys.argv) <= 1:
    print('Usage: %s <path/to/logs> [<day> | [<from-date> <to-date>]]' % sys.argv[0])
    print('    date format is "YYYY-MM-DD" or "YYYY-MM-DD HH:MM:SS", get times from...')
    print('    - no dates: total times,')
    print('    - day only: times during that day,')
    print('    - from and to: time between from and to, to is exclusive')
    sys.exit(0)
logs = logalyzer.LogDirectory(sys.argv[1])
from_day = to_day = None
if len(sys.argv) > 2:
    from_day = sys.argv[2]
    if ' ' not in from_day: from_day += ' 00:00:00'
    to_day = strftime('%Y-%m-%d %H:%M:%S', (datetime.strptime(from_day, '%Y-%m-%d %H:%M:%S') + timedelta(days=1)).timetuple())
if len(sys.argv) > 3:
    to_day = sys.argv[3]
    if ' ' not in to_day: to_day += ' 00:00:00'

# TODO update :P
from_day, from_time = from_day.split(' ', 1) if from_day else (None, None)
to_day, to_time = to_day.split(' ', 1) if to_day else (None, None)

total = {}  # uuid -> seconds
last_name = {}  # uuid -> name
for uuid, sessions in logs.collect_user_sessions(from_day, to_day, from_time, to_time).items():
    total[uuid] = 0
    for uuid, t_from, t_to, name in sessions:
        total[uuid] += t_to - t_from
        last_name[uuid] = name

human_width = max(map(lambda s: len(str(timedelta(seconds=s))), total.values())) \
    if len(total) > 0 else 0
for uuid, seconds in sorted(total.items(), key=lambda x: x[1], reverse=True):
    human_time = str(timedelta(seconds=seconds))
    print('%-16s %6is or %*s' % (last_name[uuid] + ':', seconds, human_width, human_time))
